:py:mod:`danrerlib.enrichment`
==============================

.. py:module:: danrerlib.enrichment

.. autoapi-nested-parse::

   Enrichment Module
   =================

   The Enrichment module offers a collection of functions to perform gene enrichment analyses. These analyses allow you to identify overrepresented gene sets or concepts in a given set of genes compared to a background or universe of genes. The module supports various enrichment databases, methods, and organisms, making it a versatile tool for uncovering biological insights.

   Functions:
       - ``enrich_logistic``: Perform functional enrichment analysis using logistic regression for any of the supported annotation databases:
                   
                   - 'KEGG Pathway': Kyoto Encyclopedia of Genes and Genomes Pathways
                   - 'KEGG Disease': Kyoto Encyclopedia of Genes and Genomes Diseases
                   - 'GO BP': Gene Ontology Biological Processes
                   - 'GO CC': Gene Ontology Cellular Components
                   - 'GO MF': Gene Ontology Molecular Function
                   - 'GO': Gene Ontology Biological Processes, Cellular Components, and Molecular Function
       
       - ``enrich_fishers``: Perform functional enrichment analysis using Fisher's exact test for any of the supported annotation databases:

                   - 'KEGG Pathway': Kyoto Encyclopedia of Genes and Genomes Pathways
                   - 'KEGG Disease': Kyoto Encyclopedia of Genes and Genomes Diseases
                   - 'GO BP': Gene Ontology Biological Processes
                   - 'GO CC': Gene Ontology Cellular Components
                   - 'GO MF': Gene Ontology Molecular Function
                   - 'GO': Gene Ontology Biological Processes, Cellular Components, and Molecular Function
       
   Private Functions (used by enrich_logistic and enrich_fishers):

       - ``_enrich``: Launch enrichment and perform quality control.
       - ``_enrich_variable_org``: Launch enrichment and perform quality for a variable organism.
       - ``_logistic``: Perform statistical test using logistic regression.
       - ``_fishers``: Perform statistical test using Fisher's exact test.

   Constants:
       - ``NCBI_ID``: Identifier for NCBI Gene ID.
       - ``ZFIN_ID``: Identifier for ZFIN ID.
       - ``ENS_ID``: Identifier for Ensembl ID.
       - ``SYMBOL``: Identifier for gene Symbol.
       - ``HUMAN_ID``: Identifier for Human NCBI Gene ID.

   Notes:
       - The Enrichment module is designed for conducting functional enrichment analyses using various databases and methods.
       - It provides functions to analyze gene sets in the context of Gene Ontology (GO) and Kyoto Encyclopedia of Genes and Genomes (KEGG) concepts.
       - Users can choose from different gene ID types and organisms for analysis, enhancing flexibility.
       - The module includes statistical methods such as logistic regression and Fisher's exact test for enrichment analysis.

   Example:
       To perform gene enrichment analysis for a set of zebrafish genes:
       
       ``results = enrich_logistic(gene_universe, gene_id_type=ZFIN_ID, database='KEGG Pathway', org='dre')``

       This example performs functional enrichment analysis using logistic regression on the specified gene set for zebrafish genes (org='dre').

   For comprehensive details on each function and usage examples, please consult the documentation. You can also find tutorials demonstrating the full functionality of the Enrichment module.



Module Contents
---------------


Functions
~~~~~~~~~

.. autoapisummary::

   danrerlib.enrichment.enrich_fishers
   danrerlib.enrichment.enrich_logistic



.. py:function:: enrich_fishers(gene_universe: danrerlib.settings.pd.DataFrame, database: list[str], gene_id_type: str, org='dre', direction='non-directional', sig_gene_cutoff_pvalue=0.05, log2FC_cutoff_value=0, concept_ids=None, background_gene_set=None, sig_conceptID_cutoff_pvalue=0.05, order_by_p_value=True, min_num_genes_in_concept=10, include_all=False, orthology_base='dre') -> danrerlib.settings.pd.DataFrame

   Perform functional enrichment analysis using the logistic method, a cut-off free method.

   Parameters:
       - ``gene_universe (pd.DataFrame)``: A DataFrame containing gene information, including gene IDs, p-values, and log2FC.
       - ``database (str or list[str])``: A list of functional annotation databases to test. Options include:

               - 'KEGG Pathway': Kyoto Encyclopedia of Genes and Genomes Pathways
               - 'KEGG Disease': Kyoto Encyclopedia of Genes and Genomes Diseases
               - 'GO BP': Gene Ontology Biological Processes
               - 'GO CC': Gene Ontology Cellular Components
               - 'GO MF': Gene Ontology Molecular Function
               - 'GO': Gene Ontology Biological Processes, Cellular Components, and Molecular Function
               - 'all': all databases shown above
               - a list of any combination of the databases shown above. eg. databases = [KEGG Pathway, KEGG Disease]

       - ``gene_id_type (str)``: The type of gene ID in the gene universe. The recommended gene id type is NCBI Gene ID (NCBI_ID). Must be one of: NCBI Gene ID, ZFIN ID, Ensembl ID, Symbol, or for human: Human NCBI Gene ID.
       - ``org (str)``: The organism code ('dre' for zebrafish, 'dreM' for mapped zebrafish, 'hsa' for human, 'variable' for varied).
       - ``directional_test (str, optional)``: 'up' to test for up-regulation, 'down' to test for down-regulation, 'non-directional' for enrichment/depletion. Default is 'non-directional'
       - ``sig_gene_cutoff_pvalue (float, optional)``: The significance cutoff for gene inclusion based on p-values. Default is 0.05.
       - ``log2FC_cutoff_value (float, optional)``: The log2 fold change cutoff value for gene inclusion. Default is 0.
       - ``concept_ids (list, optional)``: A list of concept IDs (e.g., pathway IDs or disease IDs) to analyze. Default is None.
       - ``background_gene_set (pd.DataFrame, optional)``: A DataFrame representing a background gene set. Default is None.
       - ``sig_conceptID_cutoff_pvalue (float, optional)``: The significance cutoff for concept IDs based on p-values. Default is 0.05.
       - ``order_by_p_value (bool, optional)``: Whether to order the results by p-value. Default is True.
       - ``min_num_genes_in_concept (int, optional)``: The minimum number of genes in a concept for it to be considered. Default is 10.
       - ``include_all (bool, optional)``: Include all results without filtering based on significance. Default is False.
       - `orthology_base (str, optional)`: The base organism code for orthology comparisons. Default is 'dre'.

   Returns:
       - ``result (pd.DataFrame)``: A DataFrame containing enrichment analysis results, including concept details, the number of genes in the concept in the universe, the number of significant genes belonging to the concept, the proportion of genes in the concept, p-value, odds ratio, and enrichment direction.

   Note:
       - If you are providing a list of concept ids, they must come from one database only.
       - Fisher's Exact test is cutoff dependent. 


.. py:function:: enrich_logistic(gene_universe: danrerlib.settings.pd.DataFrame, database: list[str], gene_id_type: str, org: str = 'dre', directional_test: bool = True, sig_gene_cutoff_pvalue: float = 0.05, log2FC_cutoff_value: float = 0, concept_ids: list[str] = None, background_gene_set: danrerlib.settings.pd.DataFrame = None, sig_conceptID_cutoff_pvalue: float = 0.05, order_by_p_value: bool = True, min_num_genes_in_concept: int = 10, include_all: bool = False, orthology_base: str = 'dre') -> danrerlib.settings.pd.DataFrame

   Perform functional enrichment analysis using the logistic method, a cut-off free method.

   Parameters:
     - `gene_universe (pd.DataFrame)`: A DataFrame containing gene information, including gene IDs, p-values, and log2FC.
     - `database (str or list[str])`: A list of functional annotation databases to test.
     - `gene_id_type (str)`: The type of gene ID in the gene universe.
     - `org (str, optional)`: The organism code ('dre' for zebrafish, 'dreM' for mapped zebrafish, 'hsa' for human, 'variable' for varied).
     - `directional_test (bool, optional)`: True for directional test (up/down regulation), False for non-directional (enrichment/depletion). Default is True.
     - `sig_gene_cutoff_pvalue (float, optional)`: The significance cutoff for gene inclusion based on p-values. Default is 0.05.
     - `log2FC_cutoff_value (float, optional)`: The log2 fold change cutoff value for gene inclusion. Default is 0.
     - `concept_ids (list[str], optional)`: A list of concept IDs (e.g., pathway IDs or disease IDs) to analyze. Default is None.
     - `background_gene_set (pd.DataFrame, optional)`: A DataFrame representing a background gene set. Default is None.
     - `sig_conceptID_cutoff_pvalue (float, optional)`: The significance cutoff for concept IDs based on p-values. Default is 0.05.
     - `order_by_p_value (bool, optional)`: Whether to order the results by p-value. Default is True.
     - `min_num_genes_in_concept (int, optional)`: The minimum number of genes in a concept for it to be considered. Default is 10.
     - `include_all (bool, optional)`: Include all results without filtering based on significance. Default is False.
     - `orthology_base (str, optional)`: The base organism code for orthology comparisons. Default is 'dre'.

   Returns:
     - `result (pd.DataFrame)`: A DataFrame containing enrichment analysis results.

   Note:
     - If you are providing a list of concept IDs, they must come from one database only.
     - The logistic regression method does not depend on the p-value cutoff for significance.


