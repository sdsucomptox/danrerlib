:py:mod:`danrerlib.enrichment`
==============================

.. py:module:: danrerlib.enrichment

.. autoapi-nested-parse::

   Enrichment Module
   =================

   The Enrichment module offers a collection of functions to perform gene enrichment analyses. These analyses allow you to identify overrepresented gene sets or concepts in a given set of genes compared to a background or universe of genes. The module supports various enrichment databases, methods, and organisms, making it a versatile tool for uncovering biological insights.

   Functions:
       - ``enrich``: Perform gene enrichment analysis using logistic regression or Fisher's exact test for any of the supported annotation databases.

                   - `KEGG Pathway`
                   - `KEGG Disease`
                   - `GO BP`: Gene Ontology Biological Processes
                   - `GO CC`: Gene Ontology Cellular Components
                   - `GO MF`: Gene Ontology Molecular Function
                   - `GO`: Gene Ontology Biological Processes, Cellular Components, and Molecular Function

       - ``logistic``: Perform gene enrichment using logistic regression.
       - ``fishers``: Perform gene enrichment using Fisher's exact test.

   Constants:
       - ``NCBI_ID``: Identifier for NCBI Gene ID.
       - ``ZFIN_ID``: Identifier for ZFIN ID.
       - ``ENS_ID``: Identifier for Ensembl ID.
       - ``SYMBOL``: Identifier for gene Symbol.
       - ``HUMAN_ID``: Identifier for Human NCBI Gene ID.

   Notes:
       - The Enrichment module is designed for conducting gene enrichment analyses using various databases and methods.
       - It provides functions to analyze gene sets in the context of Gene Ontology (GO) and Kyoto Encyclopedia of Genes and Genomes (KEGG) concepts.
       - Users can choose from different gene ID types and organisms for analysis, enhancing flexibility.
       - The module includes statistical methods such as logistic regression and Fisher's exact test for enrichment analysis.

   Example:
       To perform gene enrichment analysis for a set of zebrafish genes:
       
       ``results = enrich(gene_universe, gene_id_type=ZFIN_ID, database='KEGG Pathway', method = 'fishers', org='dre')``

       This example performs gene enrichment analysis using Fisher's exact test on the specified gene set for zebrafish genes (org='dre').

   For comprehensive details on each function and usage examples, please consult the documentation. You can also find tutorials demonstrating the full functionality of the Enrichment module.



Module Contents
---------------


Functions
~~~~~~~~~

.. autoapisummary::

   danrerlib.enrichment.enrich
   danrerlib.enrichment.logistic
   danrerlib.enrichment.fishers



.. py:function:: enrich(gene_universe: danrerlib.settings.pd.DataFrame, gene_id_type: str, database: list[str], org='dre', method='logistic', direction='both', sig_gene_cutoff_pvalue=0.05, log2FC_cutoff_value=0, concept_ids=None, background_gene_set=None, sig_conceptID_cutoff_pvalue=0.05, order_by_p_value=True, min_num_genes_in_concept=10, include_all=False) -> danrerlib.settings.pd.DataFrame

   Perform gene enrichment analysis.

   Parameters:
       - ``gene_universe (pd.DataFrame)``: A DataFrame containing gene information, including gene IDs, p-values, and log2FC.
       - ``gene_id_type (str)``: The type of gene ID in the gene universe. The recommended gene id type is NCBI Gene ID (NCBI_ID). Must be one of: NCBI Gene ID, ZFIN ID, Ensembl ID, Symbol, or for human: Human NCBI Gene ID.
       - ``database (str or list[str])``: A list of functional annotation databases to test. Options include:

               - `KEGG Pathway`
               - `KEGG Disease`
               - `GO BP`: Gene Ontology Biological Processes
               - `GO CC`: Gene Ontology Cellular Components
               - `GO MF`: Gene Ontology Molecular Function
               - `GO`: Gene Ontology Biological Processes, Cellular Components, and Molecular Function
               - `all`: all databases shown above
               - a list of any combination of the databases shown above. eg. databases = [KEGG Pathway, KEGG Disease]

       - ``org (str)``: The organism code ('dre' for zebrafish, 'dreM' for mapped zebrafish, 'hsa' for human).
       - ``method (str, optional)``: The enrichment analysis method ('logistic' or 'fishers'). Default is 'logistic'.
       - ``direction (str, optional)``: The direction of statistical test for enrichment ('up', 'down', or 'both'). Default is 'both'.
       - ``sig_gene_cutoff_pvalue (float, optional)``: The significance cutoff for gene inclusion based on p-values. Default is 0.05.
       - ``log2FC_cutoff_value (float, optional)``: The log2 fold change cutoff value for gene inclusion. Default is 0.
       - ``concept_ids (list, optional)``: A list of concept IDs (e.g., pathway IDs or disease IDs) to analyze. Default is None.
       - ``background_gene_set (pd.DataFrame, optional)``: A DataFrame representing a background gene set. Default is None.
       - ``sig_conceptID_cutoff_pvalue (float, optional)``: The significance cutoff for concept IDs based on p-values. Default is 0.05.
       - ``order_by_p_value (bool, optional)``: Whether to order the results by p-value. Default is True.
       - ``min_num_genes_in_concept (int, optional)``: The minimum number of genes in a concept for it to be considered. Default is 10.
       - ``include_all (bool, optional)``: Include all results without filtering based on significance. Default is False.

   Returns:
       - ``result (pd.DataFrame)``: A DataFrame containing enrichment analysis results, including concept details, the number of genes in the concept in the universe, the number of significant genes belonging to the concept, the proportion of genes in the concept, p-value, odds ratio, and enrichment direction.

   Note:
       - If you are providing a list of concept ids, they must come from one database only.


.. py:function:: logistic(gene_universe_in: danrerlib.settings.pd.DataFrame, sig_genes_set: danrerlib.settings.pd.DataFrame, gene_set: danrerlib.settings.pd.DataFrame, gene_id_type: str, concept_type: str, concept_id: str, concept_name: str, total_number_of_genes_in_universe: int, test_direction)

   Perform functional enrichment analysis using logistic regression.

   Parameters:
       - ``gene_universe_in (pd.DataFrame)``: A DataFrame representing the universe of genes.
       - ``sig_genes_set (pd.DataFrame)``: A DataFrame containing the significantly expressed genes.
       - ``gene_set (pd.DataFrame)``: A DataFrame containing the genes of interest.
       - ``gene_id_type (str)``: The type of gene identifier used in the DataFrames.
       - ``concept_type (str)``: The type of concept (e.g., pathway) being analyzed.
       - ``concept_id (str)``: The ID of the concept being analyzed.
       - ``concept_name (str)``: The name or description of the concept being analyzed.
       - ``total_number_of_genes_in_universe (int)``: The total number of genes in the universe.
       - ``test_direction (str)``: The directionality of the test ('greater', 'less', or 'two-sided').
       
   Returns:
       - ``data (dict)``: A dictionary containing enrichment analysis results, including concept details,
         the number of genes in the concept in the universe, the number of significant genes belonging
         to the concept, the proportion of genes in the concept, odds ratio, p-value, and enrichment direction.

   Notes:
       - This function performs functional enrichment analysis using logistic regression.
       - It calculates enrichment statistics for a specified concept (e.g., pathway) by comparing a gene set
         of interest to a larger gene universe.
       - The 'gene_id_type' parameter specifies the type of gene identifiers used in the DataFrames.
       - The 'test_direction' parameter determines the directionality of the test ('greater', 'less', or 'two-sided').
       - Enrichment results include the odds ratio, p-value, and enrichment direction.


.. py:function:: fishers(gene_universe: danrerlib.settings.pd.DataFrame, sig_genes_set: danrerlib.settings.pd.DataFrame, gene_set: danrerlib.settings.pd.DataFrame, gene_id_type: str, concept_type: str, concept_id: str, concept_name: str, total_number_of_genes_in_universe: int, test_direction)

   Perform functional enrichment analysis using Fisher's exact test.

   Parameters:
       - ``gene_universe (pd.DataFrame)``: A DataFrame representing the universe of genes.
       - ``sig_genes_set (pd.DataFrame)``: A DataFrame containing the significantly expressed genes.
       - ``gene_set (pd.DataFrame)``: A DataFrame containing the genes of interest.
       - ``gene_id_type (str)``: The type of gene identifier used in the DataFrames.
       - ``concept_type (str)``: The type of concept (e.g., pathway) being analyzed.
       - ``concept_id (str)``: The ID of the concept being analyzed.
       - ``concept_name (str)``: The name or description of the concept being analyzed.
       - ``total_number_of_genes_in_universe (int)``: The total number of genes in the universe.
       - ``test_direction (str)``: The directionality of the test. 
         Options: 'two-sided', 'greater', 'less'.
       
   Returns:
       - ``data (dict)``: A dictionary containing enrichment analysis results, including concept details,
         the number of genes in the concept in the universe, the number of significant genes belonging
         to the concept, the proportion of genes in the concept, odds ratio, p-value, and enrichment direction.

   Notes:
       - This function performs functional enrichment analysis using Fisher's exact test.
       - It calculates enrichment statistics for a specified concept (e.g., pathway) by comparing a gene set
         of interest to a larger gene universe.
       - The 'gene_id_type' parameter specifies the type of gene identifiers used in the DataFrames.
       - The 'test_direction' parameter determines the directionality of the test ('two-sided', 'greater', 'less').
       - Enrichment results include the odds ratio, p-value, and enrichment direction.


